% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsf.R
\name{run_lsf}
\alias{run_lsf}
\title{Submit array jobs to LSF clusters.}
\usage{
run_lsf(FUN, PARAMS, BSUB_config = default_BSUB_config(),
  modules = c("R/3.4.0"),
  input_file = "EASYPAR_LSF_input_jobarray.csv",
  R_script = "EASYPAR_LSF_Run.R",
  Submission_script = "EASYPAR_LSF_submission.sh", run = FALSE)
}
\arguments{
\item{FUN}{A function that takes any arguments in input, and performs
a computation. This function should be runnable as a standalone R script.}

\item{PARAMS}{A data.frame where each row represents inputs for \code{FUN}.
An array job with as many rows as \code{PARAMS} is generated.}

\item{BSUB_config}{A list of BSUB commands for the LSF cluster should
be provided. The default input is obtained from a call to \code{default_BSUB_config()}.
The queue and the project ID should always be provided as they are cluster-specific. 
Otherwise, default values will prompt errors submitting the job.}

\item{modules}{A list of modules that will be added as dependencies of the
LSF submission script. For instance \code{modules = 'R/3.4.0'} will generate
the dependecy for a specific R version as \code{"module load R/3.4.0"}.}

\item{input_file}{The name of the data.frame input file that is generated
from \code{PARAMS}. This file contains no header, and no row names.}

\item{R_script}{The name of the R script file that contains the definition
of \code{FUN}, and some other autogenerated R code to call the function
with input parameters from the command line. Function \code{FUN} is given
a fake name in this script.}

\item{Submission_script}{The name of the LSF script file that contains the 
submission routines.}

\item{run}{If `TRUE`, the function all attempt invoking `bsub` and submit
the array jobs. Otherwise it will print to screen the instructions to run
the job manually through the console.}
}
\value{
Nothing, this funciton just generates the required inputs to submit
an array job via the LSF clusters. If required, it also attempts submitting
the jobs.
}
\description{
This function submits array jobs to LDF clusters.

The input has to be a function that can carry out a full computation
itself, plus a data.frame where each row represents the inputs that
this function is expecting. The input data.frame is dumped to a file,
the input function is wrapped inside an automatically generated R
script that gathers inputs from the command line. A LSF submission
script is generated for a bash shell. The function can also run the
LSF command `bsub` to submit the job, or just generate the required 
files and prompt the user to submit the job via the shell. LSF parameters
can be provided as a list of parameters, similarly modules and custom
filenames for the generated scripts.
}
\note{
The queue and the project ID in `BSUB_config` should  
always be provided as they are cluster-specific. Default values will
prompt errors submitting the job. Besides, we have found that automatic job submission
can sometimes generate some `command not found` types of errors. Manual 
submission seems generally the safest option to submit LSF jobs.
}
\examples{
# very dummy example function
FUN = function(x, y){ print(x, y) }

# input for 25 array jobs
PARAMS = data.frame(x = runif(25), y = runif(25))

\dontrun{
# vcall - not run - as it's cluster-specific
run_lsf(FUN, PARAMS)
}
}
\seealso{
See \code{default_BSUB_config} that is used to generate
default parameters for LSF jobs.
}
