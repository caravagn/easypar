})
}
t
i
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
tryCatch({
# run, and cache if required
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
},
error = function(e)
{
print("[easypar] Intercepted error")
message(e)
NULL
})
}
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
tryCatch({
# run, and cache if required
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
},
error = function(e)
{
print("[easypar] Intercepted error")
message(e)
return(NULL)
})
}
R
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
tryCatch({
# run, and cache if required
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
},
error = function(e)
{
print("[easypar] Intercepted error")
message(e)
return(NULL)
})
}
R
source('~/Documents/GitHub/easypar/R/run.R')
source('~/Documents/GitHub/easypar/R/run.R')
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try(r = do.call(FUN, PARAMS[[i]]))
cacheit(r, cache)
r
}
name <- function(variables) {
}
source('~/Documents/GitHub/easypar/R/run.R')
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R = NULL
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R
R = NULL
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R = NULL
R = foreach(i = 1:N, .packages = packages, .export = export) %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r})
}
R
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'pass') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
}
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'pass') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
}
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'remove') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
}
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'remove') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
}
i=1
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
do.call(FUN, PARAMS[[i]])
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
})
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'remove') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
# try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
# })
}
R
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'remove') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
# try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
# })
}
R
# Run with parallelism is a dopar
R = foreach(i = 1:N, .packages = packages, .export = export, .errorhandling = 'pass') %dopar%
{
# error catch
# tryCatch({
#
#   # run, and cache if required
#   r = do.call(FUN, PARAMS[[i]])
#   cacheit(r, cache)
#   r
#
# },
# error = function(e)
# {
#   print("[easypar] Intercepted error")
#   message(e)
#   return(NULL)
# })
# run, and cache if required
# try({
r = do.call(FUN, PARAMS[[i]])
cacheit(r, cache)
r
# })
}
R
R[[9]]
class(R[[9]])
class(R[[1]])
source('~/Documents/GitHub/easypar/R/run.R')
x= list(1)
append(x, list(3))
append(x, w = list(3))
w= list(e)
w= list(4)
w
names(w) = 4
append(x, w)
source('~/Documents/GitHub/easypar/R/run.R')
source('~/Documents/GitHub/easypar/R/run.R')
errs = lapply(R, function(w) inherits(w, 'simpleError') | inherits(w, 'try-error'))
errs
errs = sapply(R, function(w) inherits(w, 'simpleError') | inherits(w, 'try-error'))
errs
5/100
message("[easypar] task with erros : ", nerrs, "[%", perrs, "]")
nerrs = sum(errs)
perrs = 100 * nerrs/length(R)
message("[easypar] task with erros : ", nerrs, "[%", perrs, "]")
message("[easypar] task with erros : ", nerrs, " [", perrs, "%]")
message("[easypar] task with erros : ", nerrs, " [", perrs, "%, n =", lenght(R), "]")
message("[easypar] task with erros : ", nerrs, " [", perrs, "%, n =", length(R), "]")
message("[easypar] task(s) returning errors : ", nerrs, " [", perrs, "%, n =", length(R), "]")
source('~/Documents/GitHub/easypar/R/run.R')
library(easypar)
source('~/Documents/GitHub/easypar/R/run.R')
source('~/Documents/GitHub/easypar/R/run.R')
library(easypar)
source('~/Documents/GitHub/easypar/R/run.R')
source('~/Documents/GitHub/easypar/R/run.R')
source('~/Documents/GitHub/easypar/R/run.R')
library(easypar)
source('~/Documents/GitHub/easypar/R/run.R')
library(easypar)
devtools::document()
devtools::document()
library(easypar)
